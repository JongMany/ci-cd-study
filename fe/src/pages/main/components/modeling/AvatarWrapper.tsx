/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useEffect, useRef } from "react";
import * as THREE from "three";
// import Avatar from "./Avatar";
useGLTF.preload("models/646d9dcdc8a5f5bddbfac913.glb");
type Props = { animation: string };
export function AvatarWrapper({ animation, ...props }: Props) {
  const groupRef = useRef<THREE.Group | null>(null);
  const { nodes, materials, scene } = useGLTF(
    `${import.meta.env.VITE_BASE_URL}/models/646d9dcdc8a5f5bddbfac913.glb`
  );

  const { animations: typingAnimation } = useFBX(
    `${import.meta.env.VITE_BASE_URL}/animations/Typing.fbx`
  );
  const { animations: standingAnimation } = useFBX(
    `${import.meta.env.VITE_BASE_URL}/animations/Standing_Idle.fbx`
  );
  const { animations: fallingAnimation } = useFBX(
    `${import.meta.env.VITE_BASE_URL}/animations/Falling_Idle.fbx`
  );

  typingAnimation[0].name = "Typing";
  standingAnimation[0].name = "Standing";
  fallingAnimation[0].name = "Falling";

  const { actions } = useAnimations(
    [typingAnimation[0], standingAnimation[0], fallingAnimation[0]],
    groupRef
  );

  useEffect(() => {
    //   const animate = actions[animation];
    //   animate?.reset().fadeIn(0.5).play();
    //   return () => {
    //     animate?.reset().fadeOut(0.5);
    //   };
    //   // console.dir(actions["Standing"]);
    //   // actions["Standing"].reset().fadeIn(0.5).play();
    // }, [actions]);

    const animate = actions[animation];
    const typingAnimate = actions["Typing"];
    if (animate) {
      // animate.reset().fadeIn(0.5).play();
      typingAnimate?.reset().fadeIn(0.5).play();
      return () => {
        typingAnimate?.reset().fadeOut(0.5);
      };
    }
  }, [animation]);
  return (
    <group {...props} ref={groupRef} dispose={null}>
      <group>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );

  // return (
  //   <group {...props} ref={groupRef} dispose={null}>
  //     {actions && animation && (
  //       <Avatar
  //         nodes={nodes}
  //         materials={materials}
  //         actions={actions as { [x: string]: THREE.AnimationAction }}
  //         actionName={animation}
  //       />
  //     )}
  //   </group>
  // );
}
